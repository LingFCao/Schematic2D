function internalPropertyPanelInitialize( obj )
% configurate the property panel window


% obtain the current position of the master figure
currentFiguPosition = obj.parent.Fig.Position;

% define the figure properties
xoffsetfactor = .3;
yoffsetfactor = .1;

widthreduction  = .4; 
heightreduction = .6;


xpos = currentFiguPosition(1) + xoffsetfactor * currentFiguPosition(3);
ypos = currentFiguPosition(2) + yoffsetfactor * currentFiguPosition(4);

width  = widthreduction  * currentFiguPosition( 3 );
height = heightreduction * currentFiguPosition( 4 );

if xpos + width > .99
    % offset the xpos such that xpos + width = .98
    xpos = .98 - width;
end

if ypos + height > .99
    ypos = .98 - height;
end
NumberOfElements = 11;
if ~isempty( obj.propertypanelwindow )
    set( obj.propertypanelwindow, 'position', [xpos, ypos, width, height], 'visible', 'on' );
    % update current ui ...
    [namestringcell, actflag, valstringcell ] = obj.internalPropertyReturnCurrentPropertyName();
    count = 0;
    for p = obj.propertypanelstaticcomponents.getAll()
        count = count + 1;
        if actflag( count )
            set(p, 'visible', 'on',  'string', namestringcell{ count } );
        else
            set(p, 'visible', 'off', 'string', namestringcell{ count } );
        end
    end
    count = 0;
    for p = obj.propertypaneleditablecomponents.getAll()
        count = count + 1;
        if actflag( count )
            % activate p
            set( p, 'visible', 'on', 'string',  valstringcell{ count } );
        else
            set( p, 'visible', 'off', 'string', valstringcell{ count } );
        end
    end
else
    propertywin = figure( ...
        'name', 'properties', ...
        'units', 'normalized', ...
        'toolbar', 'none', ...
        'color', [.7, .7, .7], ...
        'position', [xpos, ypos, width, height]);
%     set( propertywin, 'CloseRequestFcn', {@Schematic2D.staticModifyCloseRequestFcn, propertywin} );
    set( propertywin, 'CloseRequestFcn', {@Schematic2D.staticModifyPropertyPanelCloseRequestFcn, obj} );
    % one now adds the static ui-elements to the propertywin
    % determine the positions of those elements
    yoffset   = .01;
    dy        = (.9 - ( NumberOfElements + 1 ) * yoffset ) / NumberOfElements;
    yposition = 1.5 * dy + (1 : NumberOfElements ) * yoffset + (0 : NumberOfElements - 1 ) * dy;
    yposition = yposition(end:-1:1);
    xposition = .05 * ones( size( yposition ) );
    width     = .20 * ones( size( yposition ) );
    height    =  dy * ones( size( yposition ) );
    % get the current namestrcell and the activation flag
    [namestringcell, actflag, valstringcell ] = obj.internalPropertyReturnCurrentPropertyName();
    for k = 1 : NumberOfElements
        if actflag( k ), state = 'on'; else, state = 'on'; end
        p = uicontrol( propertywin, ...
            'style', 'text', ...
            'units', 'normalized', ...
            'position', [xposition( k ), yposition( k ), width( k ), height( k ) ], ...
            'backgroundcolor', [.5, .5, .5], ...
            'foregroundcolor', 'b', ...
            'fontsize', 15, ...
            'string', namestringcell{ k }, ...
            'visible', state );
        obj.propertypanelstaticcomponents.add( p );
        % create the editable area
        q = uicontrol( propertywin, ...
            'style', 'edit', ...
            'units', 'normalized', ...
            'backgroundcolor', [.6, .6, .6], ...
            'position', [xposition( k ) + width( k ) + yoffset, yposition( k ), .7, height( k ) ], ...
            'fontWeight', 'normal', ...
            'fontsize', 18, ...
            'string', valstringcell{ k }, ...
            'visible', state);
        %
        obj.propertypaneleditablecomponents.add( q );
    end
    obj.propertypanelwindow = propertywin;
    % for the push button ... 
    obj.previewcomponent = uicontrol( propertywin, ...
        'style', 'pushbutton', ...
        'units', 'normalized', ...
        'backgroundcolor', 'b', ...
        'foregroundcolor', 'w', ...
        'position', [.65, .015, .15, .1], ...
        'string', 'preview', ...
        'fontsize', 8 );
    
    % for the push button  ...
    obj.exportcomponent = uicontrol( propertywin, ...
        'style', 'pushbutton', ...
        'units', 'normalized', ...
        'backgroundcolor', 'r', ...
        'foregroundcolor', 'w', ...
        'position', [.805, .015, .15, .1], ...
        'string', 'export', ...
        'fontsize', 8 );
    % create listeners now!
    obj.internalPropertySetEditableListener();
    
end

