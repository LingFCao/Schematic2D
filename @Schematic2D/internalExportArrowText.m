function internalExportArrowText( obj, ~, ~ )

if ~isempty( obj.previewArrowText ), obj.previewArrowText.deleteObj(); obj.previewArrowText = []; end

if ~isempty( obj.arrowTextSchematicObj )
    captureIsEnabled = obj.canvasEnabledCapture();
    if captureIsEnabled, obj.setEnableCapture( 'off' ); end
    p = SchematicLine( obj, obj.propertyArrowTextStruct.style, ...
        'color',        obj.propertyArrowTextStruct.color, ...
        'linewidth',    obj.propertyArrowTextStruct.linewidth, ...
        'linestyle',    obj.propertyArrowTextStruct.linestyle );
    p.setTextboxSize( ...
        obj.propertyArrowTextStruct.width, ...
        obj.propertyArrowTextStruct.height );
    % set textbox property
    p.setProperties( 'textbox', ...
        'interpreter', 'latex', ...
        'color',           obj.propertyArrowTextStruct.textcolor, ...
        'backgroundcolor', obj.propertyArrowTextStruct.backgroundcolor, ...
        'edgecolor',       obj.propertyArrowTextStruct.edgecolor, ...
        'fontsize',        obj.propertyArrowTextStruct.fontsize );
    % draw now and set text
    p.draw( ...
        'start',  obj.arrowTextSchematicObj.internalStartPosition, ...
        'end',    obj.arrowTextSchematicObj.internalFinalPosition );
    p.setText( obj.arrowTextSchematicObj.textBox.String );
    if obj.useCustomName, p.name = obj.propertyArrowTextStruct.name; end
    % place 'p' to the special container 
    obj.previewArrowText = p;
    obj.arrowTextSchematicObj.turn( 'off' );
    if captureIsEnabled, obj.setEnableCapture( 'on' ); end
    % reset the useCustomName property ... 
end