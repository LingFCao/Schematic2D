function internalbringuppropertypanel( obj )
% initialization/update script to call upon the property panel. The initial
% position and size depends on the current master canvas.
%%
% obtain the current position
currentFigurePosition = obj.parent.parent.Fig.Position;
% define the xoffset
xoffsetfactor = .8;
yoffsetfactor = .5;
% reduction factors
widthreduction  = .4; 
heightreduction = .4;
% define the x, y position of key-assignment panel ... 
xpos  = currentFigurePosition(1) + xoffsetfactor * currentFigurePosition(3); 
ypos  = currentFigurePosition(2) + yoffsetfactor * currentFigurePosition(4);
% define the width
width = widthreduction  * currentFigurePosition(3);
height= heightreduction * currentFigurePosition(4);
if xpos + width > .99
    xpos = .98 - width;
end
if ypos + height > .99
    ypos = .98 - height;
end
if ~isempty( obj.imagepropertypanel )
    % update the position of the property panel 
    set( obj.imagepropertypanel, 'position', [xpos, ypos, width, height], 'visible', 'on' ); 
    % there is no need to update the string since this panel is not shared
    % by others
else
    propertywin = figure( ...
        'name', 'properties', ...
        'units', 'normalized', ...
        'toolbar', 'none', ...
        'color', [.7, .7, .7], ...
        'position', [xpos, ypos, width, height]);
    set( propertywin, 'closerequestfcn', {@Schematic2D.staticModifyCloseRequestFcn, propertywin} );
    obj.imagepropertypanel = propertywin;
    % introduce some offsets to control how the ui-elements will lay out. 
    NumberOfElements = 6;
    yoffset    = .04;   % controls the inter-spacing between each ui-element in the y-direction
    dy         = (.85 - ( NumberOfElements + 1 ) * yoffset ) / NumberOfElements;
    yposition  = 1. * dy + (1 : NumberOfElements ) * yoffset + (0 : NumberOfElements - 1 ) * dy;
    yposition  = yposition(end:-1:1);
    xposition  = .05;
    % small-width applies to the bound-setting elements
    smallwidth = .2;
    largewidth = .62;
    xoffset    = .02;   % controls the inter-spacing between each ui-element in the x-direction
    %% setting physical bounds (x)
    p          = uicontrol( ...
        propertywin, ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(1), smallwidth, dy ], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'x1');
    obj.statictextcompts.add( p );
    % 
    p           = uicontrol( ...
        propertywin, ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition + 2 * smallwidth + xoffset, yposition(1), smallwidth, dy ], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'x2');
    obj.statictextcompts.add( p );
    % for the editable 
    q            = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + smallwidth, yposition(1), smallwidth, dy], ...
        'fontsize', 15, ...
        'string', num2str(obj.xlowerbound));
    obj.editabletextcompts.add( q );
    % set callback now
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.xlowerboundcallback( src, evt, q) );
    obj.editablelisteners.add( L );
    
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + 3 * smallwidth + xoffset, yposition(1), smallwidth, dy], ...
        'fontsize', 15, ...
        'string', num2str(obj.xupperbound));
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.xupperboundcallback( src, evt, q) );
    obj.editablelisteners.add( L );
    
    %% setting physical bounds ( y )
   p          = uicontrol( ...
        propertywin, ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(2), smallwidth, dy ], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'y1');
    obj.statictextcompts.add( p );
    % 
    p           = uicontrol( ...
        propertywin, ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition + 2 * smallwidth + xoffset, yposition(2), smallwidth, dy ], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'y2');
    obj.statictextcompts.add( p );
    % for the editable 
    q            = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + smallwidth, yposition(2), smallwidth, dy], ...
        'fontsize', 15, ...
        'string', num2str(obj.ylowerbound));
    obj.editabletextcompts.add( q );
    % set callback now
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.ylowerboundcallback( src, evt, q) );
    obj.editablelisteners.add( L );
    
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + 3 * smallwidth + xoffset, yposition(2), smallwidth, dy], ...
        'fontsize', 15, ...
        'string', num2str(obj.yupperbound));
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.yupperboundcallback( src, evt, q) );
    obj.editablelisteners.add( L );
    %% iteration
    p             = uicontrol( ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(3), largewidth, dy], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'maxIteration');
    obj.statictextcompts.add( p );
    % editable iteration
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + largewidth, yposition(3), smallwidth, dy], ...
        'fontsize', 15, ...
        'string', num2str(obj.maxIteration));
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.iterationcallback(src, evt, q) );
    obj.editablelisteners.add( L );
    %% finally the guide rgb
    p             = uicontrol( ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(4), largewidth, dy], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'guideRGB');
    obj.statictextcompts.add( p );
    % editable guide rgb
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + largewidth, yposition(4), smallwidth, dy], ...
        'fontsize', 12, ...
        'string', 'none');
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.guidergbcallback( src, evt, q));
    obj.editablelisteners.add( L );
    
    % editable direction
    p             = uicontrol( ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(5), largewidth, dy], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'direction');
    obj.statictextcompts.add( p );
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + largewidth, yposition(5), smallwidth, dy], ...
        'fontsize', 12, ...
        'string', obj.direction);
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.directioncallback( src, evt, q));
    obj.editablelisteners.add( L );
    % editable axes type
    p             = uicontrol( ...
        'style', 'text', ...
        'units', 'normalized', ...
        'position', [xposition, yposition(6), largewidth, dy], ...
        'backgroundcolor', [.5, .5, .5], ...
        'foregroundcolor', 'b', ...
        'fontsize', 15, ...
        'string', 'axisType');
    obj.statictextcompts.add( p );
    q             = uicontrol( ...
        'style', 'edit', ...
        'units', 'normalized', ...
        'backgroundcolor', [.6, .6, .6], ...
        'position', [xposition + largewidth, yposition(6), smallwidth, dy], ...
        'fontsize', 12, ...
        'string', obj.axisType);
    obj.editabletextcompts.add( q );
    L = addlistener(q, 'String', 'PostSet', @(src, evt) obj.axisTypeCallback( src, evt, q));
    obj.editablelisteners.add( L );
end





